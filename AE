
/** Exercise 2.1: Recursive descent parser
  *
  * Tasks
  *
  * 1. Replace each occurrence of ??? by a correct implementation
  * so that all tests except one in AESpec.scala pass.
  *
  * 2. Write an alternative parser `parse2` for the language
  * `Exp2` described at the end of this file, so that
  * the last test in AESpec.scala passes. Feel free to
  * write more tests: They make your code more robust
  * and can be helpful in the development process.
  */
trait AE {
  // Suppose we want to implement a calculator for arithmetic
  // expressions with addition and multiplication.
  // An arithmetic expression is...
  sealed trait Exp
  // a number literal, or...
  case class Num(toInt: Int) extends Exp
  // an addition, or...
  case class Add(lhs: Exp, rhs: Exp) extends Exp
  // a multiplication.
  case class Mul(lhs: Exp, rhs: Exp) extends Exp
  // the expression 6 + 6 * 6

  // evaluating an expression to an integer
  def eval(exp: Exp): Int = exp match {
    case Num(n) => n
    case Add(lhs, rhs) => eval(lhs) + eval(rhs)
    case Mul(lhs, rhs) => eval(lhs) * eval(rhs)
  }
  // Assertions in the body of an object are executed when the
  // object is initialized. It is better to put assertions in a
  // test, so that they are executed no matter whether objects of
  // type AE gets created or not.
  // assert(eval(e1) == 42)
  // 6 * (4 + 3)
  val e1 = Add( Num(6), Mul( Num(6), Num(6) ) )
  val e2 = Mul(Num(6), Add(Num(4), Num(3)))

  def parseNum(code: String): Option[(Num, String)] = {

    val Pattern = "([0-9]+)(.*)".r
    code match {
      case Pattern(digits, rest) =>
        Some((Num(digits.toInt), rest))
      case otherwise =>
        None
    }
  }


  def parseSumOf(code: String): Option[(String, String)] = {
    val sumOf = "sum of "
    if (code.startsWith(sumOf))
      Some((sumOf, code.drop(sumOf.length)))
    else
      None
  }

  def parseAnd(code: String): Option[(String, String)] = {
    val and = " and "
    if (code.startsWith(and))
      Some((and, code.drop(and.length)))
    else
      None
  }


  def parseProductOf(code: String): Option[(String, String)] = {
    val sumOf = "product of "
    if (code.startsWith(sumOf))
      Some((sumOf, code.drop(sumOf.length)))
    else
      None
  }
  def parseMul(code: String): Option[(Mul, String)] =
  // first try to match "sum of "
    parseProductOf(code) match {
      // code does not begin with "sum of "; it's not a sum.
      case None => None
      // code matches "sum of "; try to parse 1st operand
      case Some((sumOf, afterSumOf)) =>
        parseExp(afterSumOf) match {
          // fails to parse first operand
          case None => None
          // succeeds to parse lhs; try to match " and "
          case Some((lhs, afterLhs)) =>
            parseAnd(afterLhs) match {
              case None => None
              // " and " matches; try to parse 2nd operand
              case Some((and, afterAnd)) =>
                parseExp(afterAnd) match {
                  case None => None
                  // succeeds to parse the entire sum expression
                  case Some((rhs, rest)) =>
                    Some((Mul(lhs, rhs), rest))
                }
            }
        }
    }


  def parseExp(code: String): Option[(Exp, String)] =
  // try Add
    parseAdd(code) match {
      // Add succeeded
      case Some((add, rest)) =>
        Some((add, rest))
      // Add failed; try Mul
      case None =>
        parseMul(code) match {
          // Mul succeeded
          case Some((mul, rest)) =>
            Some((mul, rest))
          // Mul failed; try Num
          case None =>
            parseNum(code) match {
              // Num succeeded
              case Some((num, rest)) =>
                Some((num, rest))
              // Num failed; there's nothing else to try
              case None =>
                None
            }
        }
    }

  def parse(code: String): Exp = parseExp(code) match {
    case Some((exp, rest)) if rest.isEmpty =>
      exp
    case Some((exp, rest)) if rest.nonEmpty =>
      sys.error("not an expression: " + code)
    case None =>
      sys.error("not an expression: " + code)
  }


  def parseadd(code: String): Option[(String, String)] = {
    val sumOf = "add "
    if (code.startsWith(sumOf))
      Some((sumOf, code.drop(sumOf.length)))
    else
      None
  }

  def parseto(code: String): Option[(String, String)] = {
    val and = " to "
    if (code.startsWith(and))
      Some((and, code.drop(and.length)))
    else
      None
  }

  def parseby(code: String): Option[(String, String)] = {
    val sumOf = " by "
    if (code.startsWith(sumOf))
      Some((sumOf, code.drop(sumOf.length)))
    else
      None
  }
  def parsemultiply(code: String): Option[(String, String)] = {
    val sumOf = "multiply "
    if (code.startsWith(sumOf))
      Some((sumOf, code.drop(sumOf.length)))
    else
      None
  }

  def parseAdd(code: String): Option[(Add, String)] =
  // first try to match "sum of "
    parseSumOf(code) match {
      // code does not begin with "sum of "; it's not a sum.
      case None => None
      // code matches "sum of "; try to parse 1st operand
      case Some((sumOf, afterSumOf)) =>
        parseExp(afterSumOf) match {
          // fails to parse first operand
          case None => None
          // succeeds to parse lhs; try to match " and "
          case Some((lhs, afterLhs)) =>
            parseAnd(afterLhs) match {
              case None => None
              // " and " matches; try to parse 2nd operand
              case Some((and, afterAnd)) =>
                parseExp(afterAnd) match {
                  case None => None
                  // succeeds to parse the entire sum expression
                  case Some((rhs, rest)) =>
                    Some((Add(lhs, rhs), rest))
                }
            }
        }
    }

  def parseAdd2(code: String): Option[(Add, String)] =
  // first try to match "sum of "
    parseadd(code) match {
      // code does not begin with "sum of "; it's not a sum.
      case None => None
      // code matches "sum of "; try to parse 1st operand
      case Some((sumOf, afterSumOf)) =>
        parseExp2(afterSumOf) match {
          // fails to parse first operand
          case None => None
          // succeeds to parse lhs; try to match " and "
          case Some((lhs, afterLhs)) =>
            parseto(afterLhs) match {
              case None => None
              // " and " matches; try to parse 2nd operand
              case Some((and, afterAnd)) =>
                parseExp2(afterAnd) match {
                  case None => None
                  // succeeds to parse the entire sum expression
                  case Some((rhs, rest)) =>
                    Some((Add(lhs, rhs), rest))
                }
            }
        }
    }
  def parseMul2(code: String): Option[(Mul, String)] =
  // first try to match "sum of "
    parsemultiply(code) match {
      // code does not begin with "sum of "; it's not a sum.
      case None => None
      // code matches "sum of "; try to parse 1st operand
      case Some((sumOf, afterSumOf)) =>
        parseExp2(afterSumOf) match {
          // fails to parse first operand
          case None => None
          // succeeds to parse lhs; try to match " and "
          case Some((lhs, afterLhs)) =>
            parseby(afterLhs) match {
              case None => None
              // " and " matches; try to parse 2nd operand
              case Some((and, afterAnd)) =>
                parseExp2(afterAnd) match {
                  case None => None
                  // succeeds to parse the entire sum expression
                  case Some((rhs, rest)) =>
                    Some((Mul(lhs, rhs), rest))
                }
            }
        }
    }

  //                    assert(parse("sum of 6 and product of 6 and 6") == e1)
  //                    assert(parse2("add 6 to multiply 6 by 6") == e1)


  def parseExp2(code: String): Option[(Exp, String)] =
  // try Add
    parseAdd2(code) match {
      // Add succeeded
      case Some((add, rest)) =>
        Some((add, rest))
      // Add failed; try Mul
      case None =>
        parseMul2(code) match {
          // Mul succeeded
          case Some((mul, rest)) =>
            Some((mul, rest))
          // Mul failed; try Num
          case None =>
            parseNum(code) match {
              // Num succeeded
              case Some((num, rest)) =>
                Some((num, rest))
              // Num failed; there's nothing else to try
              case None =>
                None
            }
        }
    }
  def parse2(code: String): Exp  = parseExp2(code) match {
    case Some((exp, rest)) if rest.isEmpty =>
      exp
    case Some((exp, rest)) if rest.nonEmpty =>
      sys.error("not an expression: " + code)
    case None =>
      sys.error("not an expression: " + code)
  }
}


